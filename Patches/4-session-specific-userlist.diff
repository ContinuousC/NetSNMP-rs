diff --git a/include/net-snmp/library/snmp_secmod.h b/include/net-snmp/library/snmp_secmod.h
index 77c3578cb..ff959db12 100644
--- a/include/net-snmp/library/snmp_secmod.h
+++ b/include/net-snmp/library/snmp_secmod.h
@@ -95,7 +95,8 @@ typedef int     (SecmodDiscoveryMethod) (struct session_list *slp,
                                          netsnmp_session *session);
 typedef int     (SecmodPostDiscovery) (struct session_list *slp,
                                        netsnmp_session *session);
-typedef int     (SecmodDiscoveryPdu) (netsnmp_pdu **pdu);
+typedef int     (SecmodDiscoveryPdu) (netsnmp_pdu **pdu,
+				      netsnmp_session *session);
 typedef int     (SecmodDiscoveryRes) (struct session_list *slp,
 				      netsnmp_session *session,
 				      int              status,
@@ -103,6 +104,7 @@ typedef int     (SecmodDiscoveryRes) (struct session_list *slp,
 
 typedef int     (SecmodSessionSetup) (netsnmp_session *in_session,
                                       netsnmp_session *out_session);
+
 /*
  * definition of a security module
  */
diff --git a/snmplib/snmp_api.c b/snmplib/snmp_api.c
index 4475a10ff..b025076e5 100644
--- a/snmplib/snmp_api.c
+++ b/snmplib/snmp_api.c
@@ -5270,7 +5270,7 @@ snmp_sess_send_probe(struct session_list *slp) {
         return 0;
     }
 
-    status = (*sptr->build_probe_pdu) (&pdu);
+    status = (*sptr->build_probe_pdu) (&pdu, session);
     if (status != 0 || pdu == NULL) {
         DEBUGMSGTL(("sess_send_probe", "fail: build_probe_pdu failed\n"));
         return 0;
diff --git a/snmplib/snmpusm.c b/snmplib/snmpusm.c
index 2d9f7f8f7..56b254a31 100644
--- a/snmplib/snmpusm.c
+++ b/snmplib/snmpusm.c
@@ -1458,8 +1458,10 @@ usm_generate_out_msg(int msgProcModel,  /* (UNUSED) */
                       * * globalData is returned here, could also be a separate
                       * * buffer.
                       */
-                     size_t * wholeMsgLen)
-{                               /* IN/OUT - Len available, len returned. */
+                     size_t * wholeMsgLen, /* IN/OUT - Len available, len returned. */
+		     netsnmp_session *session)
+{
+    struct usmUser *userList = (struct usmUser *) session->securityInfo;
     size_t          otstlen;
     size_t          seq_len;
     size_t          msgAuthParmLen;
@@ -1543,7 +1545,8 @@ usm_generate_out_msg(int msgProcModel,  /* (UNUSED) */
          * we do allow an unknown user name for
          * unauthenticated requests. 
          */
-        user = usm_get_user2(secEngineID, secEngineIDLen, secName, secNameLen);
+        user = usm_get_user_from_list(secEngineID, secEngineIDLen,
+				      secName, secNameLen, userList, 1);
         if (user == NULL && secLevel != SNMP_SEC_LEVEL_NOAUTH) {
             DEBUGMSGTL(("usm", "Unknown User(%s)\n", secName));
             return SNMPERR_USM_UNKNOWNSECURITYNAME;
@@ -1916,7 +1919,8 @@ usm_secmod_generate_out_msg(struct snmp_secmod_outgoing_params *parms)
                                 parms->scopedPdu, parms->scopedPduLen,
                                 parms->secStateRef,
                                 parms->secParams, parms->secParamsLen,
-                                parms->wholeMsg, parms->wholeMsgLen);
+                                parms->wholeMsg, parms->wholeMsgLen,
+				parms->session);
 }
 
 #ifdef NETSNMP_USE_REVERSE_ASNENCODING
@@ -1958,13 +1962,15 @@ usm_rgenerate_out_msg(int msgProcModel, /* (UNUSED) */
                        * Length of the entire packet buffer, **not** the length of the
                        * packet.  
                        */
-                      size_t * offset           /*  IN/OUT  */
+                      size_t * offset,          /*  IN/OUT  */
                       /*
                        * Offset from the end of the packet buffer to the start of the packet,
                        * also known as the packet length.  
                        */
-    )
+		      netsnmp_session *session /* IN */
+		      )
 {
+    struct usmUser *userList = (struct usmUser *) session->securityInfo;
     size_t          msgAuthParmLen = 0;
     u_int           boots_uint;
     u_int           time_uint;
@@ -2039,7 +2045,8 @@ usm_rgenerate_out_msg(int msgProcModel, /* (UNUSED) */
          * we do allow an unknown user name for
          * unauthenticated requests. 
          */
-        user = usm_get_user2(secEngineID, secEngineIDLen, secName, secNameLen);
+        user = usm_get_user_from_list(secEngineID, secEngineIDLen,
+				      secName, secNameLen, userList, 1);
         if (user == NULL && secLevel != SNMP_SEC_LEVEL_NOAUTH) {
             DEBUGMSGTL(("usm", "Unknown User\n"));
             return SNMPERR_USM_UNKNOWNSECURITYNAME;
@@ -2426,7 +2433,8 @@ usm_secmod_rgenerate_out_msg(struct snmp_secmod_outgoing_params *parms)
                                  parms->scopedPdu, parms->scopedPduLen,
                                  parms->secStateRef,
                                  parms->wholeMsg, parms->wholeMsgLen,
-                                 parms->wholeMsgOffset);
+                                 parms->wholeMsgOffset,
+				 parms->session);
 }
 #endif                          /* */
 
@@ -2939,6 +2947,7 @@ usm_process_in_msg(int msgProcModel,    /* (UNUSED) */
                    netsnmp_session * sess,      /* IN     - session which got the message  */
                    u_char msg_flags)
 {                               /* IN     - v3 Message flags.              */
+    struct usmUser *userList = (struct usmUser *) sess->securityInfo;
     size_t          remaining = wholeMsgLen - (u_int)
         ((u_long) * secParams - (u_long) * wholeMsg);
     u_int           boots_uint;
@@ -3078,13 +3087,11 @@ usm_process_in_msg(int msgProcModel,    /* (UNUSED) */
      * Locate the User record.
      * If the user/engine ID is unknown, report this as an error.
      */
-    snmp_res_lock(MT_LIBRARY_ID, MT_LIB_USMUSERLIST);
     user = usm_get_user_from_list(secEngineID, *secEngineIDLen,
 				  secName, *secNameLen, userList,
 				  (((sess && sess->isAuthoritative ==
 				     SNMP_SESS_AUTHORITATIVE) ||
 				    (!sess)) ? 0 : 1));
-    snmp_res_unlock(MT_LIBRARY_ID, MT_LIB_USMUSERLIST);
 
     if (user == NULL) {
         DEBUGMSGTL(("usm", "Unknown User(%s)\n", secName));
@@ -3536,6 +3543,28 @@ usm_session_init(netsnmp_session *in_session, netsnmp_session *session)
     return SNMPERR_SUCCESS;
 }
 
+static int
+usm_session_open(netsnmp_session *session)
+{
+    session->securityInfo = NULL;
+    return SNMPERR_SUCCESS;
+}
+
+static int
+usm_session_close(netsnmp_session *session)
+{
+    struct usmUser **userList = (struct usmUser **) &session->securityInfo;
+    struct usmUser *user, *next;
+    for (user = *userList, next = NULL; user != NULL; user = next) {
+        next = user->next;
+        user->prev = NULL;
+        user->next = NULL;
+	usm_free_user(user);
+    }
+    *userList = NULL;
+    return SNMPERR_SUCCESS;
+}
+
 static int usm_build_user(struct usmUser **result,
                           const netsnmp_session *session)
 {
@@ -3592,7 +3621,8 @@ err:
 int
 usm_create_user_from_session(netsnmp_session * session)
 {
-    struct usmUser *user;
+    struct usmUser **userList = (struct usmUser **) &session->securityInfo;
+    struct usmUser *user, *uptr;
     int             user_just_created = 0;
     char *cp;
 
@@ -3614,13 +3644,11 @@ usm_create_user_from_session(netsnmp_session * session)
      * now that we have the engineID, create an entry in the USM list
      * for this user using the information in the session 
      */
-    snmp_res_lock(MT_LIBRARY_ID, MT_LIB_USMUSERLIST);
     user = usm_get_user_from_list(session->securityEngineID,
                                   session->securityEngineIDLen,
                                   session->securityName,
                                   session->securityNameLen,
-                                  usm_get_userList(), 0);
-    snmp_res_unlock(MT_LIBRARY_ID, MT_LIB_USMUSERLIST);
+                                  *userList, 0);
     if (NULL != user) {
         DEBUGMSGTL(("usm", "user exists x=%p\n", user));
     } else {
@@ -3760,7 +3788,9 @@ usm_create_user_from_session(netsnmp_session * session)
          */
         user->userStatus = RS_ACTIVE;
         user->userStorageType = ST_READONLY;
-        usm_add_user(user);
+        uptr = usm_add_user_to_list(user, *userList);
+	if (uptr != NULL)
+	    *userList = uptr;
     }
     DEBUGMSGTL(("9:usm", "user created\n"));
 
@@ -3779,9 +3809,10 @@ usm_create_user_from_session_hook(struct session_list *slp,
 }
 
 static int
-usm_build_probe_pdu(netsnmp_pdu **pdu)
+usm_build_probe_pdu(netsnmp_pdu **pdu, netsnmp_session *session)
 {
-    struct usmUser *user;
+    struct usmUser **userList = (struct usmUser **) &session->securityInfo;
+    struct usmUser *user, *uptr;
 
     /*
      * create the pdu 
@@ -3800,8 +3831,8 @@ usm_build_probe_pdu(netsnmp_pdu **pdu)
     /*
      * create the empty user 
      */
-    user = usm_get_user2(NULL, 0, (*pdu)->securityName,
-                         (*pdu)->securityNameLen);
+    user = usm_get_user_from_list(NULL, 0, (*pdu)->securityName,
+				  (*pdu)->securityNameLen, *userList, 1);
     if (user == NULL) {
         user = calloc(1, sizeof(struct usmUser));
         if (user == NULL) {
@@ -3817,7 +3848,9 @@ usm_build_probe_pdu(netsnmp_pdu **pdu)
         user->privProtocolLen = OID_LENGTH(usmNoPrivProtocol);
         user->privProtocol =
             snmp_duplicate_objid(usmNoPrivProtocol, user->privProtocolLen);
-        usm_add_user(user);
+        uptr = usm_add_user_to_list(user, *userList);
+	if (uptr != NULL)
+	    *userList = uptr;
     }
     return 0;
 }
@@ -3833,7 +3866,7 @@ static int usm_discover_engineid(struct session_list *slp,
     netsnmp_pdu    *pdu = NULL, *response = NULL;
     int status;
 
-    if (usm_build_probe_pdu(&pdu) != 0) {
+    if (usm_build_probe_pdu(&pdu, session) != 0) {
         DEBUGMSGTL(("snmp_api", "unable to create probe PDU\n"));
         return SNMP_ERR_GENERR;
     }
@@ -5115,6 +5148,8 @@ init_usm(void)
     def->pdu_clone = usm_clone;
     def->pdu_free_state_ref = usm_free_usmStateReference;
     def->session_setup = usm_session_init;
+    def->session_open = usm_session_open;
+    def->session_close = usm_session_close;
     def->handle_report = usm_handle_report;
     def->probe_engineid = usm_discover_engineid;
     def->post_probe_engineid = usm_create_user_from_session_hook;
